import{p as e}from"./phaser-CwoquCe3.js";!function(){const e=document.createElement("link").relList;if(!(e&&e.supports&&e.supports("modulepreload"))){for(const e of document.querySelectorAll('link[rel="modulepreload"]'))t(e);new MutationObserver((e=>{for(const i of e)if("childList"===i.type)for(const e of i.addedNodes)"LINK"===e.tagName&&"modulepreload"===e.rel&&t(e)})).observe(document,{childList:!0,subtree:!0})}function t(e){if(e.ep)return;e.ep=!0;const t=function(e){const t={};return e.integrity&&(t.integrity=e.integrity),e.referrerPolicy&&(t.referrerPolicy=e.referrerPolicy),"use-credentials"===e.crossOrigin?t.credentials="include":"anonymous"===e.crossOrigin?t.credentials="omit":t.credentials="same-origin",t}(e);fetch(e.href,t)}}();class t extends e.Scene{constructor(){super("Boot")}preload(){this.load.image("background","assets/bg.png")}create(){this.scene.start("Preloader"),this.scale.on("orientationchange",(e=>{e===Phaser.Scale.PORTRAIT||this.add.text(this.scale.width/2,this.scale.height/2,"Please rotate your device to portrait mode",{fontSize:"24px",fill:"#fff"}).setOrigin(.5)}))}}const i={core:{type:Phaser.AUTO,parent:"game-container",backgroundColor:"#028af8"},scale:{mode:Phaser.Scale.FIT,autoCenter:Phaser.Scale.CENTER_BOTH,width:900,height:1600,min:{width:270,height:480},max:{width:1800,height:3200},orientation:Phaser.Scale.PORTRAIT},physics:{default:"arcade",arcade:{gravity:{y:0},debug:!1}},mechanics:{damage:{enemyToPlayer:1,playerToEnemy:1},knockback:{force:150},timers:{deathDelay:1e3}},camera:{shake:{duration:100,intensity:.01},flash:{duration:500,color:{r:255,g:0,b:0}}},fx:{hitFlash:{duration:100,color:16777215}},player:{startX:450,startY:800,size:90,innerSize:72,maxSpeed:120,accelFactor:.25,health:3,invulnerability:{duration:1e3,blinkDuration:100,blinkCount:10},colors:{border:0,fill:255}},joystick:{x:450,y:1400,radius:60,baseRadius:140,thumbRadius:70,baseColor:8947848,thumbColor:13421772,forceMin:70},ui:{timeScaleText:{x:20,y:20,style:{fontFamily:"Arial",fontSize:"3rem",color:"#ffffff"}},healthDisplay:{x:20,y:20,size:20,spacing:30,colors:{active:16711680,inactive:5592405}}},backgroundColor:"#F8FAFC"};class s extends Phaser.Physics.Arcade.Sprite{constructor(e,t,a){s.createPlayerTexture(e),super(e,t,a,"playerSprite"),e.add.existing(this),e.physics.add.existing(this),this.setCollideWorldBounds(!0),this.setDamping(!0),this.setDrag(.9),this.health=i.player.health,this.maxHealth=i.player.health,this.invulnerable=!1,this.invulnerabilityTime=1e3,this.invulnerabilityTime=i.player.invulnerability.duration,this.createHealthDisplay()}createHealthDisplay(){const e=i.ui.healthDisplay;this.healthDisplay=[];for(let t=0;t<this.maxHealth;t++){const i=this.scene.add.rectangle(e.x+t*e.spacing,e.y,e.size,e.size,e.colors.active).setScrollFactor(0);this.healthDisplay.push(i)}this.updateHealthDisplay()}updateHealthDisplay(){const e=i.ui.healthDisplay;for(let t=0;t<this.healthDisplay.length;t++)this.healthDisplay[t].fillColor=t<this.health?e.colors.active:e.colors.inactive}takeDamage(e){this.invulnerable||(this.health=Math.max(0,this.health-e),this.updateHealthDisplay(),this.setInvulnerable(),this.scene.cameras.main.shake(i.camera.shake.duration,i.camera.shake.intensity),this.health<=0&&this.onDeath())}setInvulnerable(){this.invulnerable=!0,this.blinkEffect=this.scene.tweens.add({targets:this,alpha:.5,duration:i.player.invulnerability.blinkDuration,yoyo:!0,repeat:i.player.invulnerability.blinkCount}),this.scene.time.delayedCall(this.invulnerabilityTime,(()=>{this.invulnerable=!1,this.alpha=1}))}onDeath(){const e=i.camera.flash;this.scene.cameras.main.flash(e.duration,e.color.r,e.color.g,e.color.b),this.scene.time.delayedCall(i.mechanics.timers.deathDelay,(()=>{}))}static createPlayerTexture(e){if(e.textures.exists("playerSprite"))return;const{size:t,innerSize:s,colors:a}=i.player,n=e.make.graphics();n.fillStyle(a.border),n.fillRect(0,0,t,t);const r=(t-s)/2;n.fillStyle(a.fill),n.fillRect(r,r,s,s),n.generateTexture("playerSprite",t,t)}update(e,t){const{maxSpeed:s,accelFactor:a}=i.player,n=a*t*60;if(this.health>0){if(0!==e.x||0!==e.y){const t=this.body.velocity.x+(e.x-this.body.velocity.x)*n,i=this.body.velocity.y+(e.y-this.body.velocity.y)*n;this.setVelocity(t,i)}else this.setVelocity(0,0);this.body.velocity.x=Phaser.Math.Clamp(this.body.velocity.x,-s,s),this.body.velocity.y=Phaser.Math.Clamp(this.body.velocity.y,-s,s)}}createHealthDisplay(){this.healthDisplay=[];for(let e=0;e<this.maxHealth;e++){const t=this.scene.add.rectangle(20+30*e,20,20,20,16711680).setScrollFactor(0);this.healthDisplay.push(t)}this.updateHealthDisplay()}updateHealthDisplay(){for(let e=0;e<this.healthDisplay.length;e++)this.healthDisplay[e].fillColor=e<this.health?16711680:5592405}takeDamage(e){return!(this.invulnerable||(this.health-=e,this.updateHealthDisplay(),this.scene.cameras.main.shake(100,.01),this.scene.tweens.add({targets:this,alpha:.5,duration:100,yoyo:!0}),this.setInvulnerable(),this.health<=0&&(this.onDeath(),0)))}setInvulnerable(){this.invulnerable=!0,this.blinkEffect=this.scene.tweens.add({targets:this,alpha:.5,duration:100,yoyo:!0,repeat:10}),this.scene.time.delayedCall(this.invulnerabilityTime,(()=>{this.invulnerable=!1,this.alpha=1,this.blinkEffect&&this.blinkEffect.stop()}))}onDeath(){this.scene.cameras.main.flash(500,255,0,0),this.setActive(!1),this.scene.time.delayedCall(1e3,(()=>{console.log("Player died - Game Over")}))}}class a{constructor(e){this.scene=e,this.cursors=e.input.keyboard.createCursorKeys(),this.wasd=e.input.keyboard.addKeys({w:"W",a:"A",s:"S",d:"D"});const{x:t,y:s,radius:a,baseRadius:n,thumbRadius:r,baseColor:o,thumbColor:l,forceMin:h}=i.joystick;this.joyStick=e.plugins.get("rexvirtualjoystickplugin").add(e,{x:t,y:s,radius:a,base:e.add.circle(0,0,n,o,.5),thumb:e.add.circle(0,0,r,l,.8),dir:"8dir",forceMin:h,fixed:!0}),e.input.on("gameout",this.handlePointerUp,this),e.input.on("mouseleave",this.handlePointerUp,this),e.input.on("pointerleave",this.handlePointerUp,this),window.addEventListener("mouseup",this.handlePointerUp.bind(this)),window.addEventListener("touchend",this.handlePointerUp.bind(this))}destroy(){window.removeEventListener("mouseup",this.handlePointerUp.bind(this)),window.removeEventListener("touchend",this.handlePointerUp.bind(this))}handlePointerUp(){this.joyStick&&this.joyStick.force>0&&this.joyStick.resetForce()}getMovementVector(){const e=i.player.maxSpeed;let t=0,s=0;if(this.joyStick&&this.joyStick.force>0)return{x:.7*this.joyStick.forceX,y:.7*this.joyStick.forceY};t=(this.wasd.d.isDown||this.cursors.right.isDown)-(this.wasd.a.isDown||this.cursors.left.isDown),s=(this.wasd.s.isDown||this.cursors.down.isDown)-(this.wasd.w.isDown||this.cursors.up.isDown);const a=Math.sqrt(t*t+s*s);return a>0&&(t/=a,s/=a),{x:t*e,y:s*e}}}class n{constructor(e){this.scene=e,this.timeScale=1;const{x:t,y:s,style:a}=i.ui.timeScaleText;this.timeScaleText=e.add.text(t,s,"Speed: 1x",a),this.timeScaleText.setDepth(1e3),this.setupControls()}setupControls(){this.scene.input.keyboard.on("keydown-ONE",(()=>this.setTimeScale(0))),this.scene.input.keyboard.on("keydown-TWO",(()=>this.setTimeScale(.5))),this.scene.input.keyboard.on("keydown-THREE",(()=>this.setTimeScale(1))),this.scene.input.keyboard.on("keydown-FOUR",(()=>this.setTimeScale(2)))}setTimeScale(e){this.timeScale=e,this.scene.time.timeScale=e,this.scene.physics.world.timeScale=0===e?1e-4:1/e;let t=0===e?"PAUSED":`${e}x`;this.timeScaleText.setText(`Speed: ${t}`)}getScaledDelta(e){return e*this.timeScale}}class r extends e.Scene{constructor(){super("Game")}preload(){this.load.plugin("rexvirtualjoystickplugin","https://raw.githubusercontent.com/rexrainbow/phaser3-rex-notes/master/dist/rexvirtualjoystickplugin.min.js",!0)}create(){this.cameras.main.setBackgroundColor(i.backgroundColor),this.inputController=new a(this),this.timeScaleManager=new n(this),this.player=new s(this,i.player.startX,i.player.startY),this.input.keyboard.on("keydown-P",(()=>{this.scene.pause(),this.scene.launch("Pause")}))}handlePlayerEnemyCollision(e,t){if(e.takeDamage(i.mechanics.damage.enemyToPlayer)){const s=Phaser.Math.Angle.Between(t.x,t.y,e.x,e.y),a=i.mechanics.knockback.force;e.body.velocity.x=Math.cos(s)*a,e.body.velocity.y=Math.sin(s)*a}}update(e,t){const i=this.timeScaleManager.getScaledDelta(t)/1e3;if(this.player&&this.player.active){const e=this.inputController.getMovementVector();this.player.update(e,i)}}}class o extends e.Scene{constructor(){super("GameOver")}create(){this.cameras.main.setBackgroundColor(16711680),this.add.text(this.scale.width/2,this.scale.height/3,"Game Over",{fontFamily:"Arial Black",fontSize:64,color:"#ffffff",stroke:"#000000",strokeThickness:8,align:"center"}).setOrigin(.5),this.add.text(this.scale.width/2,this.scale.height/2+100,"Play Again",{fontFamily:"Arial",fontSize:36,color:"#ffffff",backgroundColor:"#000000",padding:{left:20,right:20,top:10,bottom:10}}).setOrigin(.5).setInteractive().on("pointerdown",(()=>{this.scene.start("Game")})),this.add.text(this.scale.width/2,this.scale.height/2+200,"Main Menu",{fontFamily:"Arial",fontSize:36,color:"#ffffff",backgroundColor:"#000000",padding:{left:20,right:20,top:10,bottom:10}}).setOrigin(.5).setInteractive().on("pointerdown",(()=>{this.scene.start("MainMenu")}))}}class l extends e.Scene{constructor(){super("MainMenu")}create(){this.add.image(512,384,"background"),this.add.image(512,300,"logo"),this.add.text(512,460,"Main Menu",{fontFamily:"Arial Black",fontSize:38,color:"#ffffff",stroke:"#000000",strokeThickness:8,align:"center"}).setOrigin(.5),this.input.once("pointerdown",(()=>{this.scene.start("Game")}))}}class h extends e.Scene{constructor(){super("Preloader")}init(){this.add.image(512,384,"background"),this.add.rectangle(512,384,468,32).setStrokeStyle(1,16777215);const e=this.add.rectangle(282,384,4,28,16777215);this.load.on("progress",(t=>{e.width=4+460*t}))}preload(){this.load.setPath("assets"),this.load.image("logo","logo.png")}create(){this.scene.start("MainMenu")}}class c extends e.Scene{constructor(){super("Pause")}create(){this.add.rectangle(450,800,900,1600,0,.7),this.add.text(450,700,"PAUSED",{fontFamily:"Arial Black",fontSize:64,color:"#ffffff",align:"center"}).setOrigin(.5),this.add.text(450,850,"Resume",{fontFamily:"Arial",fontSize:36,color:"#ffffff",align:"center"}).setOrigin(.5).setInteractive().on("pointerdown",(()=>{this.scene.resume("Game"),this.scene.stop()})),this.add.text(450,920,"Restart",{fontFamily:"Arial",fontSize:36,color:"#ffffff",align:"center"}).setOrigin(.5).setInteractive().on("pointerdown",(()=>{this.scene.stop("Pause"),this.scene.stop("Game"),this.scene.start("Game")})),this.add.text(450,990,"Main Menu",{fontFamily:"Arial",fontSize:36,color:"#ffffff",align:"center"}).setOrigin(.5).setInteractive().on("pointerdown",(()=>{this.scene.stop("Game"),this.scene.start("MainMenu")})),this.input.keyboard.on("keydown-P",(()=>{this.scene.resume("Game"),this.scene.stop()}))}}const d={type:i.core.type,parent:i.core.parent,backgroundColor:i.core.backgroundColor,scale:i.scale,physics:i.physics,scene:[t,h,l,r,o,c]};new Phaser.Game(d);
